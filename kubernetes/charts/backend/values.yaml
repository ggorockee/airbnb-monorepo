# Default values for backend.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80



resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe: {}
  # httpGet:
  #   path: /
  #   port: http
readinessProbe: {}
  # httpGet:
  #   path: /
  #   port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
existingSecret: django-secrets

ingress:
  enabled: true
  className: "istio"
  annotations: {}
  hosts:
    - chart-example.local
      
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

gateway:
  # Gateway가 트래픽을 받을 포트 설정
  port:
    number: 80
    name: http
    protocol: HTTP

  # Ingress Gateway Pod를 선택하기 위한 셀렉터
  # 기본값은 Istio 설치 시 기본적으로 사용되는 레이블입니다.
  selector:
    istio: ingressgateway

  tls:
    httpsRedirect: false

# Istio VirtualService 리소스에 대한 상세 설정
virtualservice:
  # CORS 정책 설정
  corsPolicy:
    allowOrigins:
      - regex: "https?://.*"
    allowMethods:
      - "GET"
      - "POST"
      - "PUT"
      - "DELETE"
      - "OPTIONS"
      - "PATCH"
    allowHeaders:
      - "*"
    exposeHeaders:
      - "*"
    allowCredentials: true

  # 트래픽을 라우팅할 대상(destination) 서비스 설정
  # route:
    # host: Helm 차트 내에서 생성된 서비스 이름을 동적으로 참조합니다.
    #       (별도의 서비스 이름이 필요하면 여기에 직접 지정할 수 있습니다.)
    # port: 차트의 service.port 값을 사용합니다.
    # port:
    #   number: 9200 # service.port와 동일하게 설정 (또는 원하는 값으로 변경)